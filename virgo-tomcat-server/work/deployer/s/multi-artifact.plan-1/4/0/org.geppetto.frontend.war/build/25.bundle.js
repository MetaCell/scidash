webpackJsonp([25],{

/***/ 1034:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Reusable drop down button React component. \n * Takes in a configuration with properties and data, uses it \n * to create button and drop down.\n * \n * @author Jesus R Martinez (jesus@metacell.us) \n * \n * @param require\n * @returns\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n    var React = __webpack_require__(1);\n    var GEPPETTO = __webpack_require__(132);\n    __webpack_require__(1185);\n\n    var ListItem = React.createClass({\n        displayName: 'ListItem',\n\n\n        updateIcon: false,\n        icons: {\n            checked: \"fa fa-check-circle-o\",\n            unchecked: \"fa fa-circle-o\",\n            default: \"fa fa-bolt\"\n        },\n\n        getInitialState: function getInitialState() {\n            return {\n                icon: \"\"\n            };\n        },\n\n        select: function select() {\n            this.props.handleSelect(this.props.item.value, this.props.item.radio);\n\n            var iconState = this.icons.default;\n            var action = null;\n\n            if (this.props.item.condition != undefined) {\n                // evaluate condition\n                var condition = null;\n                try {\n                    condition = eval(this.props.item.condition);\n                } catch (e) {\n                    throw \"Could not evaluate condition [\" + this.props.item.condition + \"]\";\n                }\n\n                if (typeof condition === \"boolean\") {\n                    // assign action\n                    action = condition ? this.props.item.true.action : this.props.item.false.action;\n                    // assign icon status\n                    iconState = condition ? this.icons.unchecked : this.icons.checked;\n                } else {\n                    throw \"The condition [\" + this.props.item.condition + \"] doesn't resolve to a boolean\";\n                }\n            } else {\n                // if condition does not exist, simply assign action\n                action = this.props.item.action;\n            }\n\n            // execute action\n            if (action != null) {\n                GEPPETTO.CommandController.execute(action, true);\n            }\n\n            this.setState({ icon: iconState });\n        },\n\n        componentDidMount: function componentDidMount() {\n            var iconState = this.getIconState();\n            this.setState({ icon: iconState });\n        },\n\n        getIconState: function getIconState() {\n            // figure out icon for this item\n            var iconState = this.icons.default;\n            if (this.props.item.condition != undefined) {\n                // evaluate condition\n                var condition = null;\n                try {\n                    condition = eval(this.props.item.condition);\n                } catch (e) {\n                    throw \"Could not evaluate condition [\" + this.props.item.condition + \"]\";\n                }\n\n                if (typeof condition === \"boolean\") {\n                    // assign icon status\n                    iconState = condition ? this.icons.checked : this.icons.unchecked;\n                } else {\n                    throw \"The condition [\" + this.props.item.condition + \"] doesn't resolve to a boolean\";\n                }\n            }\n\n            return iconState;\n        },\n\n        render: function render() {\n            var iconState = this.getIconState();\n            this.state.icon = iconState;\n\n            var outerClass = \"menuBtnListItem\";\n            var innerClass = \"\";\n            if (this.props.parentDisabled && this.props.item.disabled) {\n                outerClass += \" menuBtnListItemDisabled\";\n                innerClass += \" menuBtnListItemDisabled\";\n            }\n\n            return React.createElement(\n                'tr',\n                { className: outerClass, onClick: this.select },\n                React.createElement(\n                    'td',\n                    { className: 'selectedStatus' },\n                    React.createElement('i', { className: \"iconSelectionStatus \" + this.state.icon })\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'dropDownLabel' },\n                    React.createElement(\n                        'label',\n                        { className: innerClass },\n                        React.createElement(\n                            'span',\n                            null,\n                            this.props.item.label\n                        )\n                    )\n                )\n            );\n        }\n    });\n\n    var DropDownControlComp = React.createClass({\n        displayName: 'DropDownControlComp',\n\n        onClickHandler: null,\n        menuPosition: null,\n\n        getInitialState: function getInitialState() {\n            return {\n                visible: this.props.configuration.openByDefault,\n                configuration: null\n            };\n        },\n\n        componentDidMount: function componentDidMount() {\n            var self = this;\n\n            var selector = $(\"#\" + this.props.configuration.id + \"-dropDown\");\n\n            window.addEventListener('resize', function (event) {\n                if (selector != null && selector != undefined) {\n                    if (self.state.visible) {\n                        self.menuPosition = self.getMenuPosition();\n                        selector.css({\n                            top: self.menuPosition.top, right: self.menuPosition.right,\n                            bottom: self.menuPosition.bottom, left: self.menuPosition.left, position: 'fixed'\n                        });\n                    }\n                }\n            });\n        },\n\n        renderListItems: function renderListItems() {\n            var items = [];\n            if (this.props.configuration.menuItems != undefined || null) {\n                for (var i = 0; i < this.props.configuration.menuItems.length; i++) {\n                    var item = this.props.configuration.menuItems[i];\n                    if (item.radio) {\n                        // include a ref for every radio item so we can call their select method from other items\n                        items.push(React.createElement(ListItem, { key: i, item: item, ref: item.value, handleSelect: this.handleSelect, parentDisabled: this.props.configuration.buttonDisabled }));\n                    } else {\n                        items.push(React.createElement(ListItem, { key: i, item: item, handleSelect: this.handleSelect, parentDisabled: this.props.configuration.buttonDisabled }));\n                    }\n                }\n            }\n            return items;\n        },\n\n        handleSelect: function handleSelect(value, radio) {\n            // call select on any other 'checked' radio items to deselect them\n            if (radio) {\n                for (var key in this.refs) {\n                    var ref = this.refs[key];\n                    if (ref.props.item.value != value && ref.state.icon == ref.icons.checked && ref.props.item.radio) {\n                        ref.select();\n                    }\n                }\n            }\n            this.props.handleSelect(value);\n\n            if (this.props.configuration.autoFormatMenu) {\n                for (var i = 0; i < this.props.configuration.menuItems.length; i++) {\n                    var item = this.props.configuration.menuItems[i];\n                    if (item.value == value) {\n                        this.props.configuration.menuItems.splice(i, 1);\n                        this.props.configuration.menuItems.unshift(item);\n                    }\n                }\n\n                this.forceUpdate();\n            }\n        },\n\n        getMenuPosition: function getMenuPosition() {\n            var selector = $(\"#\" + this.props.configuration.id);\n            var horizontalOffset = this.props.configuration.horizontalOffset != undefined ? this.props.configuration.horizontalOffset : 0;\n            return {\n                top: selector.offset().top + selector.outerHeight(),\n                left: selector.offset().left - (selector.outerHeight() - selector.innerHeight()) - horizontalOffset\n            };\n        },\n\n        close: function close() {\n            this.setState({ visible: false });\n        },\n\n        calculateSizeandPosition: function calculateSizeandPosition() {\n            var menuSize = null;\n            var self = this;\n            //if position wasn't specify for location of menu list\n            if (self.props.configuration.menuPosition == null || self.props.configuration.menuPosition == undefined) {\n                //compute best spot for menu to show up by getting the button's top\n                //and left values, and considering padding values as well\n                this.menuPosition = self.getMenuPosition();\n            } else {\n                //assign position of menu to what it is in configuration passed\n                this.menuPosition = self.props.configuration.menuPosition;\n            }\n\n            if (self.props.configuration.menuSize != null && self.props.configuration.menuSize != undefined) {\n                menuSize = {\n                    width: self.props.configuration.menuSize.width,\n                    height: self.props.configuration.menuSize.height\n                };\n            }\n\n            var selector = $(\"#\" + this.props.configuration.id + \"-dropDown\");\n            selector.css({\n                top: self.menuPosition.top, right: self.menuPosition.right,\n                bottom: self.menuPosition.bottom, left: self.menuPosition.left, position: 'fixed'\n            });\n\n            var table = $(\"#\" + this.props.configuration.id + \"-dropDownTable\");\n            if (menuSize != null) {\n                if (menuSize.width != undefined && menuSize.height != undefined) {\n                    table.css({\n                        width: menuSize.width,\n                        height: menuSize.height\n                    });\n                }\n            }\n        },\n\n        open: function open() {\n            this.calculateSizeandPosition();\n\n            //makes sure that menu position is not offscreen or at 0,0\n            if (this.menuPosition.top <= 0 && this.menuPosition.left <= 0) {\n                this.menuPosition = this.getMenuPosition();\n                var selector = $(\"#\" + this.props.configuration.id + \"-dropDown\");\n\n                if (this.menuPosition != null && this.menuPosition != undefined) {\n                    var that = this;\n                    selector.css({\n                        top: that.menuPosition.top, right: that.menuPosition.right,\n                        bottom: that.menuPosition.bottom, left: that.menuPosition.left, position: 'fixed'\n                    });\n                }\n            }\n            this.setState({ visible: true });\n        },\n\n        render: function render() {\n            return React.createElement(\n                'div',\n                { id: this.props.configuration.id + \"-dropDownTable\", className: (this.state.visible ? 'show' : 'hide') + \" dropDownButtonContainer\" },\n                React.createElement(\n                    'table',\n                    { className: this.props.configuration.menuCSS + \" dropDownTable\", id: 'dropDownTable' },\n                    React.createElement(\n                        'tbody',\n                        null,\n                        this.renderListItems()\n                    )\n                )\n            );\n        }\n    });\n\n    var MenuButton = React.createClass({\n        displayName: 'MenuButton',\n\n        menu: null,\n        onLoadHandler: null,\n        positionUpdated: false,\n\n        getInitialState: function getInitialState() {\n            return {\n                icon: this.props.configuration.iconOff,\n                open: false,\n                menuItems: this.props.configuration.menuItems\n            };\n        },\n\n        refresh: function refresh() {\n            this.forceUpdate();\n        },\n\n        updateMenuItems: function updateMenuItems(items) {\n            this.setState({ menuItems: items });\n        },\n\n        addMenuItem: function addMenuItem(item) {\n            if (this.props.configuration.menuItems == null || this.props.configuration.menuItems == undefined) {\n                this.props.configuration.menuItems = new Array();\n            }\n            this.props.configuration.menuItems.push(item);\n            this.refresh();\n        },\n\n        //Makes the drop down menu visible\n        showMenu: function showMenu() {\n            var self = this;\n            if (self.props.configuration.menuItems.length > 0) {\n                self.refs.dropDown.open();\n            }\n\n            if (typeof self.props.configuration.menuItems.then === \"function\") {\n                self.props.configuration.menuItems.then(function (val) {\n                    self.props.configuration.menuItems = val;\n                    self.refs.dropDown.open();\n                });\n            }\n\n            var showIcon = this.props.configuration.iconOn;\n            this.setState({ open: true, icon: showIcon });\n        },\n\n        hideMenu: function hideMenu() {\n            this.refs.dropDown.close();\n            var showIcon = this.props.configuration.iconOff;\n            this.setState({ open: false, icon: showIcon });\n        },\n\n        //Adds external handler for click events, notifies it when a drop down item is clicked\n        selectionChanged: function selectionChanged(value) {\n            if (this.props.configuration.closeOnClick) {\n                this.toggleMenu();\n                if (this.onClickHandler != undefined && this.onClickHandler != null) {\n                    this.onClickHandler(value);\n                }\n            }\n        },\n\n        //Adds external load handler, gets notified when component is mounted and ready\n        addExternalLoadHandler: function addExternalLoadHandler() {\n            var self = this;\n            self.onLoadHandler = self.props.configuration.onLoadHandler;\n            if (self.onLoadHandler != null || undefined) {\n                self.onLoadHandler(self);\n            }\n        },\n\n        componentWillUnmount: function componentWillUnmount() {\n            this.onLoadHandler = null;\n            this.onClickHandler = null;\n        },\n\n        componentDidMount: function componentDidMount() {\n            var self = this;\n\n            //attach external handler for loading events\n            self.onClickHandler = self.props.configuration.onClickHandler;\n\n            //attach external handler for clicking events\n            self.addExternalLoadHandler();\n            if (this.props.configuration.closeOnClick) {\n                var container = $('#' + this.props.configuration.id + \"-container\");\n                $('body').click(function (e) {\n                    // if the target of the click isn't the container nor a descendant of the container\n                    if (!container.is(e.target) && container.has(e.target).length === 0) {\n                        if (self.props.configuration.closeOnClick) {\n                            if (self.state.open) {\n                                if (self.isMounted()) {\n                                    self.hideMenu();\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        },\n\n        //toggles visibility of drop down menu\n        toggleMenu: function toggleMenu() {\n            if (this.state.open) {\n                this.hideMenu();\n            } else {\n                this.showMenu();\n            }\n        },\n\n        render: function render() {\n            return React.createElement(\n                'div',\n                { id: this.props.configuration.id + \"-container\", className: 'menuButtonContainer' },\n                React.createElement(\n                    'button',\n                    { className: this.props.configuration.id + \" btn \" + this.props.configuration.buttonClassName, type: 'button', title: '',\n                        id: this.props.configuration.id, onClick: this.toggleMenu,\n                        disabled: this.props.configuration.buttonDisabled && this.props.configuration.disableable, ref: 'menuButton' },\n                    React.createElement('i', { className: this.state.icon + \" menuButtonIcon\" }),\n                    this.props.configuration.label\n                ),\n                React.createElement(\n                    'div',\n                    { id: this.props.configuration.id + \"-dropDown\", className: 'menuListContainer' },\n                    React.createElement(DropDownControlComp, { handleSelect: this.selectionChanged, ref: 'dropDown', configuration: this.props.configuration, parentDisabled: this.props.configuration.buttonDisabled })\n                )\n            );\n        }\n    });\n\n    return MenuButton;\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/components/controls/menuButton/MenuButton.js\n// module id = 1034\n// module chunks = 1 2 8 25\n\n//# sourceURL=webpack:///./js/components/controls/menuButton/MenuButton.js?");

/***/ }),

/***/ 1185:
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(1186);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(25)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/less-loader/dist/cjs.js?{\\\"modifyVars\\\":{\\\"url\\\":\\\"'../../../extensions/geppetto-default/colors'\\\"}}!./MenuButton.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/less-loader/dist/cjs.js?{\\\"modifyVars\\\":{\\\"url\\\":\\\"'../../../extensions/geppetto-default/colors'\\\"}}!./MenuButton.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/components/controls/menuButton/MenuButton.less\n// module id = 1185\n// module chunks = 1 2 8 25\n\n//# sourceURL=webpack:///./js/components/controls/menuButton/MenuButton.less?");

/***/ }),

/***/ 1186:
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(24)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \".dark-orange {\\n  color: #fc401a;\\n}\\n.orange {\\n  color: #fc6320;\\n}\\n.orange-color {\\n  color: #fc6320;\\n}\\n.orange-color-bg {\\n  background-color: #fc6320;\\n}\\n.menuButtonIcon {\\n  padding-right: 5px;\\n}\\n.menuListContainer {\\n  z-index: 100 !important;\\n}\\n.dropDownButtonContainer {\\n  position: fixed;\\n  z-index: 99;\\n  height: auto;\\n  width: auto;\\n  background-color: rgba(50, 50, 53, 0.8);\\n}\\n.dropDownButtonContainer:disabled {\\n  background: 0;\\n  color: #fc6320;\\n}\\n.dropDownTable {\\n  color: #fc6320;\\n  float: left;\\n  padding-right: 10px;\\n  white-space: nowrap;\\n  width: 100%;\\n  height: auto;\\n  overflow: hidden;\\n}\\n.dropDownTable label {\\n  float: left;\\n  display: inline-block;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  font-weight: normal;\\n  text-align: center;\\n  vertical-align: middle;\\n  cursor: pointer;\\n  font-size: 14px;\\n}\\n.dropDownTable label:hover {\\n  color: white;\\n}\\n.dropDownTable tr {\\n  cursor: pointer;\\n}\\n.dropDownTable tr:not(:hover) label {\\n  color: #fc6320;\\n}\\n.dropDownTable tr:hover {\\n  background-color: #fc6320;\\n  color: white;\\n}\\n.dropDownTable tr:hover label {\\n  color: white;\\n}\\n.dropDownItem {\\n  display: inline-block;\\n}\\n.selectedStatus {\\n  width: 50px;\\n  padding-left: 15px;\\n}\\n.menuBtnListItem {\\n  text-align: left;\\n}\\n.dropDownLabel {\\n  padding: 5px 20px 5px 0;\\n}\\n\", \"\"]);\n\n// exports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js?{\"modifyVars\":{\"url\":\"'../../../extensions/geppetto-default/colors'\"}}!./js/components/controls/menuButton/MenuButton.less\n// module id = 1186\n// module chunks = 1 2 8 25\n\n//# sourceURL=webpack:///./js/components/controls/menuButton/MenuButton.less?./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js?%7B%22modifyVars%22:%7B%22url%22:%22'../../../extensions/geppetto-default/colors'%22%7D%7D");

/***/ })

});