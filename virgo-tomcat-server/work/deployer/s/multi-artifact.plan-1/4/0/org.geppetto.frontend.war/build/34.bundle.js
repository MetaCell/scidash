webpackJsonp([34],{

/***/ 1132:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n *\n * Base Widget Class, all widgets extend this class.\n * @module Widgets/Widget\n * @author  Jesus R. Martinez (jesus@metacell.us)\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n    var _Backbone$View$extend;\n\n    var Backbone = __webpack_require__(59);\n    var $ = __webpack_require__(9);\n    __webpack_require__(415);\n\n    var zIndex = {\n        min: 1,\n        max: 9999,\n        restore: 10\n    };\n\n    return {\n\n        /**\n         * Not yet implemented, used for local storage and history.\n         */\n        Model: Backbone.Model.extend({}),\n\n        /**\n         * Creates base view for widget\n         */\n        View: Backbone.View.extend((_Backbone$View$extend = {\n\n            id: null,\n            dialog: null,\n            visible: true,\n            destroyed: false,\n            size: {},\n            position: {},\n            registeredEvents: null,\n            executedAction: 0,\n            lastExecutedAction: 0,\n            title: null,\n            previousMaxTransparency: false,\n            previousMaxSize: {},\n            maximize: false,\n            collapsed: false,\n            widgetType: null,\n            stateless: false,\n            showTitleBar: true,\n            transparentBackground: false,\n            dirtyView: false,\n            updateHistoryPosition: true,\n            helpInfo: '### Inline help not yet available for this widget! \\n\\n' + 'Try the <a href=\"http://docs.geppetto.org/en/latest/usingwidgets.html\"' + 'target=\"_blank\">online documentation</a> instead.',\n\n            defaultSize: function defaultSize() {\n                return { height: 300, width: 350 };\n            },\n            defaultPosition: function defaultPosition() {\n                return { left: \"50%\", top: \"50%\" };\n            },\n            /**\n             * Initializes the widget\n             *\n             * @param {String} id - id of widget\n             * @param {String} name - name of widget\n             * @param {String} visibility - visibility of widget window\n             */\n            initialize: function initialize(options) {\n                this.id = options.id;\n                this.name = options.name;\n                this.visible = options.visible;\n                this.size = this.defaultSize();\n                this.position = this.defaultPosition();\n                this.contextMenu = new GEPPETTO.ContextMenuView();\n                this.historyMenu = new GEPPETTO.ContextMenuView();\n                this.widgetType = options.widgetType;\n                this.stateless = options.stateless != undefined ? options.stateless : false;\n                this.registeredEvents = [];\n                this.dirtyView = false;\n\n                var self = this;\n                $(self.historyMenu.el).on('click', function (event) {\n                    var itemId = $(event.target).attr('id');\n                    var registeredItem = self.historyMenu.getClickedItem(itemId);\n                    if (registeredItem != null || registeredItem != undefined) {\n                        var label = registeredItem[\"label\"];\n                        self.title = label;\n                        $(\"#\" + self.id).parent().find(\".ui-dialog-title\").html(self.title);\n                    }\n                });\n                window.addEventListener('resize', function (event) {\n                    if (self.maximize) {\n                        self.maximize = false;\n                        self.setSize(window.innerHeight, window.innerWidth);\n                        self.$el.trigger('resizeEnd', [\"maximize\"]);\n                        self.maximize = true;\n                    }\n                });\n\n                //this.setSize(this.defaultSize.height, this.defaultSize.width);\n            },\n\n            /**\n             * Destroy the widget, remove it from DOM\n             *\n             * @command destroy()\n             * @returns {String} - Action Message\n             */\n            destroy: function destroy() {\n                this.$el.remove();\n                this.destroyed = true;\n                return this.name + \" destroyed\";\n            },\n\n            /**\n             * Hides the widget\n             *\n             * @command hide()\n             * @returns {String} - Action Message\n             */\n            hide: function hide() {\n                this.$el.dialog('close').dialogExtend();\n\n                this.visible = false;\n\n                return \"Hiding \" + this.name + \" widget\";\n            },\n\n            /**\n             *  Opens widget dialog\n             *\n             * @command show()\n             * @returns {Object} - Action Message\n             */\n            show: function show() {\n                this.$el.dialog('open').dialogExtend();\n                this.visible = true;\n\n                //Unfocused close button\n                $(\".ui-dialog-titlebar-close\").blur();\n\n                return this;\n            },\n\n            /**\n             * Returns widget type as defined in GEPPETTO.Widgets\n             *\n             * @returns {int}\n             */\n            getComponentType: function getComponentType() {\n                return this.widgetType;\n            },\n\n            /**\n             * Gets the name of the widget\n             *\n             * @command getName()\n             * @returns {String} - Name of widget\n             */\n            getName: function getName() {\n                return this.name;\n            },\n\n            /**\n             * Sets the name of the widget\n             * @command setName(name)\n             * @param {String} name - Name of widget\n             */\n            setName: function setName(name) {\n                this.name = name;\n\n                // set name to widget window\n                this.$el.dialog(\"option\", \"title\", this.name).dialogExtend();\n\n                // set flag to indicate something changed\n                this.dirtyView = true;\n\n                return this;\n            },\n\n            /**\n             * @command setPosition(left,top)\n             * @param {Integer} left -Left position of the widget\n             * @param {Integer} top - Top position of the widget\n             */\n            setPosition: function setPosition(left, top) {\n                if (left != null && left != undefined) {\n                    this.position.left = left;\n                }\n                if (top != null && top != undefined) {\n                    this.position.top = top;\n                }\n\n                this.$el.dialog('option', 'position', {\n                    my: \"left+\" + this.position.left + \" top+\" + this.position.top,\n                    at: \"left top\",\n                    of: $(window)\n                }).dialogExtend();\n\n                // set flag to indicate something changed\n                this.dirtyView = true;\n\n                return this;\n            },\n\n            /**\n             * Sets the size of the widget\n             * @command setSize(h,w)\n             * @param {Integer} h - Height of the widget\n             * @param {Integer} w - Width of the widget\n             */\n            setSize: function setSize(h, w) {\n                if (h != null && h != undefined && h != -1) {\n                    this.size.height = h;\n                }\n                if (w != null && w != undefined && w != -1) {\n                    this.size.width = w;\n                }\n                this.$el.dialog({ height: this.size.height, width: this.size.width }).dialogExtend();\n\n                this.$el.trigger('resizeEnd');\n\n                // set flag to indicate something changed\n                this.dirtyView = true;\n\n                return this;\n            },\n\n            /**\n             * @command setMinHeight(h)\n             * @param {Integer} h - Minimum Height of the widget\n             */\n            setMinHeight: function setMinHeight(h) {\n                this.$el.dialog('option', 'minHeight', h).dialogExtend();\n                return this;\n            },\n\n            /**\n             * @command setMinWidth(w)\n             * @param {Integer} w - Minimum Width of the widget\n             */\n            setMinWidth: function setMinWidth(w) {\n                this.$el.dialog('option', 'minWidth', w).dialogExtend();\n                return this;\n            },\n\n            /**\n             * @command setMinSize(h,w)\n             * @param {Integer} h - Minimum Height of the widget\n             * @param {Integer} w - Minimum Width of the widget\n             */\n            setMinSize: function setMinSize(h, w) {\n                this.setMinHeight(h);\n                this.setMinWidth(w);\n                return this;\n            },\n\n            /**\n             * @command setResizable(true|false)\n             * @param {Boolean} true|false - enables / disables resizability\n             */\n            setResizable: function setResizable(resize) {\n                this.$el.dialog('option', 'resizable', resize).dialogExtend();\n                return this;\n            },\n\n            /**\n             * @command setAutoWidth()\n             */\n            setAutoWidth: function setAutoWidth() {\n                this.$el.dialog('option', 'width', 'auto').dialogExtend();\n                return this;\n            },\n\n            /**\n             * @command setAutoHeigth()\n             */\n            setAutoHeight: function setAutoHeight() {\n                this.$el.dialog('option', 'height', 'auto').dialogExtend();\n                return this;\n            },\n\n            /**\n             * Returns the position of the widget\n             * @command getPosition()\n             * @returns {Object} - Position of the widget\n             */\n            getPosition: function getPosition() {\n                return this.position;\n            },\n\n            /**\n             * Returns the size of the widget\n             * @command getSize()\n             * @returns {Object} - Size of the widget\n             */\n            getSize: function getSize() {\n                return this.size;\n            },\n\n            /**\n             * Gets the ID of the widget\n             *\n             * @command getId()\n             * @returns {String} - ID of widget\n             */\n            getId: function getId() {\n                return this.id;\n            },\n\n            /**\n             * Did something change in the state of the widget?\n             *\n             * @command isDirty()\n             * @returns {boolean} - ID of widget\n             */\n            isDirty: function isDirty() {\n                return this.dirtyView;\n            },\n\n            /**\n             * Explicitly sets status of view\n             * NOTE: we need to be able to control this from outside the component\n             *\n             * @command setDirty()\n             * @param {boolean} dirty\n             */\n            setDirty: function setDirty(dirty) {\n                this.dirtyView = dirty;\n            },\n\n            /**\n             * Returns whether widget is visible or not\n             *\n             * @command isVisible()\n             * @returns {Boolean} - Widget visibility state\n             */\n            isVisible: function isVisible() {\n                return this.visible;\n            },\n\n            /**\n             * Search obj for the value of node within using path.\n             * E.g. If obj = {\"tree\":{\"v\":1}} and path is \"tree.v\", it will\n             * search within the obj to find the value of \"tree.v\", returning object\n             * containing {value : val, unit : unit, scale : scale}.\n             */\n            getState: function getState(tree, state) {\n                var paths = state.split('.'),\n                    current = tree,\n                    i;\n\n                for (i = 0; i < paths.length; ++i) {\n                    //get index from node if it's array\n                    var index = paths[i].match(/[^[\\]]+(?=])/g);\n\n                    if (index == null) {\n                        if (current[paths[i]] == undefined) {\n                            return undefined;\n                        } else {\n                            current = current[paths[i]];\n                        }\n                    } else {\n                        var iNumber = index[0].replace(/[\\[\\]']+/g, \"\");\n\n                        //take index and brackets out of the equation for now\n                        var node = paths[i].replace(/ *\\[[^]]*\\] */g, \"\");\n\n                        if (current[node][parseInt(iNumber)] == undefined) {\n                            return undefined;\n                        } else {\n                            current = current[node][parseInt(iNumber)];\n                        }\n                    }\n                }\n                return current;\n            },\n\n            getItems: function getItems(history, name) {\n                var data = [];\n                for (var i = 0; i < history.length; i++) {\n                    var action = this.getId() + \"[\" + this.getId() + \".\" + name + \"[\" + i + \"].method].apply(\" + this.getId() + \", \" + this.getId() + \".\" + name + \"[\" + i + \"].arguments)\";\n                    data.push({\n                        \"label\": history[i].label,\n                        \"action\": [action],\n                        \"icon\": null,\n                        \"position\": i\n                    });\n                }\n                return data;\n            },\n\n            showHistoryMenu: function showHistoryMenu(event) {\n                var that = this;\n                if (this.controller.history.length > 0) {\n                    that.updateHistoryPosition = true;\n                    this.historyMenu.show({\n                        top: event.pageY,\n                        left: event.pageX + 1,\n                        groups: that.getItems(that.controller.history, \"controller.history\"),\n                        data: that\n                    });\n                }\n\n                if (event != null) {\n                    event.preventDefault();\n                }\n                return false;\n            },\n\n            showContextMenu: function showContextMenu(event, data) {\n                var handlers = GEPPETTO.MenuManager.getCommandsProvidersFor(data.getMetaType());\n\n                if (handlers.length > 0) {\n                    var groups = [];\n                    for (var handlerIndex = 0; handlerIndex < handlers.length; handlerIndex++) {\n                        groups = groups.concat(handlers[handlerIndex](data));\n                    }\n\n                    this.contextMenu.show({\n                        top: event.pageY,\n                        left: event.pageX + 1,\n                        groups: groups,\n                        //registeredItems: registeredItems,\n                        data: data\n                    });\n                }\n\n                if (event != null) {\n                    event.preventDefault();\n                }\n\n                return false;\n            }\n\n        }, _defineProperty(_Backbone$View$extend, 'showTitleBar', function showTitleBar(show) {\n            this.hasTitleBar = show;\n\n            if (show) {\n                this.$el.parent().find(\".ui-dialog-titlebar\").show();\n            } else {\n                this.$el.parent().find(\".ui-dialog-titlebar\").hide();\n            }\n\n            // set flag to indicate something changed\n            this.dirtyView = true;\n\n            return this;\n        }), _defineProperty(_Backbone$View$extend, 'updateNavigationHistoryBar', function updateNavigationHistoryBar() {\n            var disabled = \"arrow-disabled\";\n            if (this.getItems(this.controller.staticHistoryMenu, \"controller.staticHistoryMenu\").length <= 1) {\n                if (!$(\"#\" + this.id + \"-left-nav\").hasClass(disabled)) {\n                    $(\"#\" + this.id + \"-left-nav\").addClass(disabled);\n                    $(\"#\" + this.id + \"-right-nav\").addClass(disabled);\n                }\n            } else {\n                if ($(\"#\" + this.id + \"-left-nav\").hasClass(disabled)) {\n                    $(\"#\" + this.id + \"-left-nav\").removeClass(disabled);\n                    $(\"#\" + this.id + \"-right-nav\").removeClass(disabled);\n                }\n            }\n        }), _defineProperty(_Backbone$View$extend, 'showHistoryNavigationBar', function showHistoryNavigationBar(show) {\n            this.hasHistoryNavigationBar = show;\n            var leftNav = $(\"#\" + this.id + \"-left-nav\");\n            var rightNav = $(\"#\" + this.id + \"-right-nav\");\n\n            if (show) {\n                if (leftNav.length == 0 && rightNav.length == 0) {\n\n                    var disabled = \"\";\n                    if (this.getItems(this.controller.staticHistoryMenu, \"controller.staticHistoryMenu\").length <= 1) {\n                        disabled = \"arrow-disabled \";\n                    }\n\n                    var that = this;\n                    var button = $(\"<div id='\" + this.id + \"-left-nav' class='\" + disabled + \"fa fa-arrow-left'></div>\" + \"<div id='\" + this.id + \"-right-nav' class='\" + disabled + \"fa fa-arrow-right'></div>\").click(function (event) {\n                        var historyItems = that.getItems(that.controller.staticHistoryMenu, \"controller.staticHistoryMenu\");\n                        var item;\n                        that.lastExecutedAction = $(\"#\" + that.id).parent().find(\".ui-dialog-title\").html();\n                        if (event.target.id == that.id + \"-right-nav\") {\n                            that.executedAction = that.executedAction + 1;\n                            if (that.executedAction >= historyItems.length) {\n                                that.executedAction = 0;\n                            }\n\n                            var match = that.executedAction;\n                            for (var i = 0; i < historyItems.length; i++) {\n                                var currentItem = historyItems[i];\n                                if (that.lastExecutedAction == currentItem.label) {\n                                    match = i;\n                                }\n                            }\n\n                            if (that.lastExecutedAction == historyItems[that.executedAction].label) {\n                                that.executedAction = match + 1;\n                            }\n\n                            if (that.executedAction <= match) {\n                                that.executedAction = match + 1;\n                                if (that.executedAction >= historyItems.length) {\n                                    that.executedAction = 0;\n                                }\n                            }\n                        }\n                        if (event.target.id == that.id + \"-left-nav\") {\n                            that.executedAction = that.executedAction - 1;\n                            if (that.executedAction <= -1) {\n                                that.executedAction = historyItems.length - 1;\n                            }\n\n                            var match = that.executedAction;\n                            for (var i = 0; i < historyItems.length; i++) {\n                                var currentItem = historyItems[i];\n                                if (that.lastExecutedAction == currentItem.label) {\n                                    match = i;\n                                }\n                            }\n\n                            if (that.lastExecutedAction == historyItems[that.executedAction].label) {\n                                that.executedAction = match - 1;\n                            }\n\n                            if (that.executedAction <= -1) {\n                                that.executedAction = historyItems.length - 1;\n                            }\n\n                            if (that.executedAction > match) {\n                                that.executedAction = match - 1;\n                                if (that.executedAction <= -1) {\n                                    that.executedAction = historyItems.length - 1;\n                                }\n                            }\n                        }\n                        that.updateHistoryPosition = false;\n                        item = historyItems[that.executedAction].action[0];\n                        GEPPETTO.CommandController.execute(item, true);\n                        $(\"#\" + that.id).parent().find(\".ui-dialog-title\").html(historyItems[that.executedAction].label);\n                        event.stopPropagation();\n                    });\n\n                    button.insertBefore(this.dialogParent.find(\"span.ui-dialog-title\"));\n                    $(button).addClass(\"widget-title-bar-button\");\n                }\n            } else {\n                if (leftNav.is(\":visible\") && rightNav.is(\":visible\")) {\n                    leftNav.remove();\n                    rightNav.remove();\n                    this.executedAction = 0;\n                }\n            }\n        }), _defineProperty(_Backbone$View$extend, 'showCloseButton', function showCloseButton(show) {\n            if (show) {\n                this.$el.parent().find(\".ui-dialog-titlebar-close\").show();\n            } else {\n                this.$el.parent().find(\".ui-dialog-titlebar-close\").hide();\n            }\n        }), _defineProperty(_Backbone$View$extend, 'addButtonToTitleBar', function addButtonToTitleBar(button) {\n            this.dialogParent.find(\"div.ui-dialog-titlebar\").prepend(button);\n            $(button).addClass(\"widget-title-bar-button\");\n        }), _defineProperty(_Backbone$View$extend, 'setDraggable', function setDraggable(draggable) {\n            if (draggable) {\n                this.$el.parent().draggable({ disabled: false });\n                // NOTE: this will wipe any class applied to the widget...\n                this.setClass('');\n            } else {\n                this.$el.parent().draggable({ disabled: true });\n                this.setClass('noStyleDisableDrag');\n            }\n        }), _defineProperty(_Backbone$View$extend, 'setTransparentBackground', function setTransparentBackground(isTransparent) {\n            this.transparentBackground = isTransparent;\n\n            if (isTransparent) {\n                this.$el.parent().addClass('transparent-back');\n                this.previousMaxTransparency = true;\n            } else {\n                this.$el.parent().removeClass('transparent-back');\n            }\n            return this;\n        }), _defineProperty(_Backbone$View$extend, 'setClass', function setClass(className) {\n            this.$el.dialog({ dialogClass: className }).dialogExtend();\n        }), _defineProperty(_Backbone$View$extend, 'perfomEffect', function perfomEffect(effect, options, speed) {\n            this.$el.parent().effect(effect, options, speed);\n        }), _defineProperty(_Backbone$View$extend, 'shake', function shake(options, speed) {\n            if (options === undefined) {\n                options = { distance: 5, times: 3 };\n            }\n            if (speed === undefined) {\n                speed = 500;\n            }\n\n            this.$el.parent().effect('shake', options, speed);\n        }), _defineProperty(_Backbone$View$extend, 'render', function render() {\n            var _$$dialog$dialogExten;\n\n            var that = this;\n\n            //create the dialog window for the widget\n            this.dialog = $(\"<div id=\" + this.id + \" class='dialog' title='\" + this.name + \" Widget'></div>\").dialog({\n                resizable: true,\n                draggable: true,\n                top: 10,\n                height: 300,\n                width: 350,\n                closeOnEscape: false,\n                close: function close(event, ui) {\n                    if (event.originalEvent && $(event.originalEvent.target).closest(\".ui-dialog-titlebar-close\").length) {\n                        that.destroy();\n                    }\n                }\n            }).dialogExtend((_$$dialog$dialogExten = {\n                \"closable\": true,\n                \"maximizable\": true,\n                \"minimizable\": true,\n                \"collapsable\": true,\n                \"restore\": true,\n                \"minimizeLocation\": \"right\",\n                \"icons\": {\n                    \"maximize\": \"fa fa-expand\",\n                    \"minimize\": \"fa fa-window-minimize\",\n                    \"collapse\": \"fa  fa-chevron-circle-up\",\n                    \"restore\": \"fa fa-compress\"\n                },\n                \"load\": function load(evt, dlg) {\n                    var icons = $(\"#\" + that.id).parent().find(\".ui-icon\");\n                    for (var i = 0; i < icons.length; i++) {\n                        //remove text from span added by vendor library\n                        $(icons[i]).text(\"\");\n                    }\n                },\n                \"beforeMinimize\": function beforeMinimize(evt, dlg) {\n                    var label = that.name;\n                    if (label != undefined) {\n                        label = label.substring(0, 6);\n                    }\n                    that.$el.dialog({ title: label });\n                },\n                \"beforeMaximize\": function beforeMaximize(evt, dlg) {\n                    var divheight = that.size.height;\n                    var divwidth = that.size.width;\n                    that.previousMaxSize = { width: divwidth, height: divheight };\n                },\n                \"minimize\": function minimize(evt, dlg) {\n                    that.$el.dialog({ title: that.name });\n                    $(\".ui-dialog-titlebar-restore span\").removeClass(\"fa-chevron-circle-down\");\n                    $(\".ui-dialog-titlebar-restore span\").removeClass(\"fa-compress\");\n                    $(\".ui-dialog-titlebar-restore span\").addClass(\"fa-window-restore\");\n                    that.$el.parent().css(\"z-index\", zIndex.min);\n                },\n                \"maximize\": function maximize(evt, dlg) {\n                    that.setTransparentBackground(false);\n                    $(this).trigger('resizeEnd');\n                    var divheight = $(window).height();\n                    var divwidth = $(window).width();\n                    that.$el.dialog({ height: divheight, width: divwidth });\n                    $(\".ui-dialog-titlebar-restore span\").removeClass(\"fa-chevron-circle-down\");\n                    $(\".ui-dialog-titlebar-restore span\").removeClass(\"fa-window-restore\");\n                    $(\".ui-dialog-titlebar-restore span\").addClass(\"fa-compress\");\n                    that.maximize = true;\n                    that.$el.parent().css(\"z-index\", zIndex.max);\n                    that.size = {\n                        height: divheight,\n                        width: divwidth\n                    };\n                }\n            }, _defineProperty(_$$dialog$dialogExten, 'restore', function restore(evt, dlg) {\n                if (that.maximize) {\n                    that.setSize(that.previousMaxSize.height, that.previousMaxSize.width);\n                    $(this).trigger('restored', [that.id]);\n                }\n                that.setTransparentBackground(that.previousMaxTransparency);\n                $(this).trigger('resizeEnd');\n                that.maximize = false;\n                that.collapsed = false;\n                that.$el.parent().css(\"z-index\", zIndex.restore);\n            }), _defineProperty(_$$dialog$dialogExten, \"collapse\", function collapse(evt, dlg) {\n                $(\".ui-dialog-titlebar-restore span\").removeClass(\"fa-compress\");\n                $(\".ui-dialog-titlebar-restore span\").removeClass(\"fa-window-restore\");\n                $(\".ui-dialog-titlebar-restore span\").addClass(\"fa-chevron-circle-down\");\n                that.collapsed = true;\n                that.$el.parent().css(\"z-index\", zIndex.min);\n            }), _$$dialog$dialogExten));\n\n            this.$el = $(\"#\" + this.id);\n            this.dialogParent = this.$el.parent();\n\n            //add history\n            this.showHistoryIcon(true);\n\n            //remove the jQuery UI icon\n            this.dialogParent.find(\"button.ui-dialog-titlebar-close\").html(\"\");\n            this.dialogParent.find(\"button\").append(\"<i class='fa fa-close'></i>\");\n\n            //Take focus away from close button\n            this.dialogParent.find(\"button.ui-dialog-titlebar-close\").blur();\n\n            //add help button\n            this.showHelpIcon(true);\n        }), _defineProperty(_Backbone$View$extend, 'registerEvent', function registerEvent(event, callback) {\n            this.registeredEvents.push({ id: event, callback: callback });\n        }), _defineProperty(_Backbone$View$extend, 'unregisterEvent', function unregisterEvent(event) {\n            this.registeredEvents = _.reject(this.registeredEvents, function (el) {\n                return el.id === event;\n            });\n        }), _defineProperty(_Backbone$View$extend, 'setHelpInfo', function setHelpInfo(helpInfo) {\n            this.helpInfo = helpInfo;\n        }), _defineProperty(_Backbone$View$extend, 'getHelp', function getHelp() {\n            return this.helpInfo;\n        }), _defineProperty(_Backbone$View$extend, 'setController', function setController(controller) {\n            this.controller = controller;\n        }), _defineProperty(_Backbone$View$extend, 'showHelpIcon', function showHelpIcon(show) {\n            var that = this;\n            if (show && this.$el.parent().find(\".history-icon\").length == 0) {\n                this.addButtonToTitleBar($(\"<div class='fa fa-question help-icon' title='Widget Help'></div>\").click(function () {\n                    GEPPETTO.ComponentFactory.addComponent('MDMODAL', {\n                        title: that.id.slice(0, -1) + ' help',\n                        content: that.getHelp(),\n                        show: true\n                    }, document.getElementById(\"modal-region\"));\n                }));\n            } else {\n                this.$el.parent().find(\".help-icon\").remove();\n            }\n        }), _defineProperty(_Backbone$View$extend, 'showHistoryIcon', function showHistoryIcon(show) {\n            var that = this;\n            if (show && this.$el.parent().find(\".history-icon\").length == 0) {\n                this.addButtonToTitleBar($(\"<div class='fa fa-history history-icon' title='Show Navigation History'></div>\").click(function (event) {\n                    that.showHistoryMenu(event);\n                    event.stopPropagation();\n                }));\n            } else {\n                this.$el.parent().find(\".history-icon\").remove();\n            }\n        }), _defineProperty(_Backbone$View$extend, 'getView', function getView() {\n            // get default stuff such as id, position and size\n            return {\n                widgetType: this.widgetType,\n                isWidget: this.isWidget(),\n                showTitleBar: this.hasTitleBar,\n                showHistoryNavigationBar: this.hasHistoryNavigationBar,\n                transparentBackground: this.transparentBackground,\n                name: this.name,\n                size: {\n                    height: this.size.height,\n                    width: this.size.width\n                },\n                position: {\n                    left: this.position.left,\n                    top: this.position.top\n                }\n            };\n        }), _defineProperty(_Backbone$View$extend, 'setView', function setView(view) {\n            // set default stuff such as position and size\n            if (view.size != undefined && view.size.height != 0 && view.size.width != 0) {\n                this.setSize(view.size.height, view.size.width);\n            } else {\n                // trigger auto size if we have no size info\n                this.setAutoWidth();\n                this.setAutoHeight();\n            }\n\n            if (view.position != undefined) {\n                this.setPosition(view.position.left, view.position.top);\n            }\n\n            if (view.name != undefined) {\n                this.setName(view.name);\n            }\n\n            if (view.showTitleBar != undefined) {\n                this.showTitleBar(view.showTitleBar);\n            }\n\n            if (view.showHistoryNavigationBar != undefined) {\n                this.showHistoryNavigationBar(view.showHistoryNavigationBar);\n            }\n\n            if (view.transparentBackground != undefined) {\n                this.setTransparentBackground(view.transparentBackground);\n            }\n\n            // after setting view through setView, reset dirty flag\n            this.dirtyView = false;\n        }), _defineProperty(_Backbone$View$extend, 'isStateLess', function isStateLess() {\n            return this.stateless;\n        }), _defineProperty(_Backbone$View$extend, 'isWidget', function isWidget() {\n            return true;\n        }), _Backbone$View$extend))\n    };\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/components/widgets/Widget.js\n// module id = 1132\n// module chunks = 29 30 31 32 33 34\n\n//# sourceURL=webpack:///./js/components/widgets/Widget.js?");

/***/ }),

/***/ 2365:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Variable visualiser Widget class\n * @module Widgets/VariableVisualiser\n * @author Dan Kruchinin (dkruchinin@acm.org)\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var Widget = __webpack_require__(1132);\n    var $ = __webpack_require__(9);\n\n    __webpack_require__(2366);\n\n    return Widget.View.extend({\n        root: null,\n        variable: null,\n        options: null,\n        default_width: 350,\n        default_height: 120,\n\n        /**\n         * Initialises variables visualiser with a set of options\n         *\n         * @param {Object} options - Object with options for the widget\n         */\n        initialize: function initialize(options) {\n            Widget.View.prototype.initialize.call(this, options);\n\n            if (!('width' in options)) {\n                options.width = this.default_width;\n            }\n            if (!('height' in options)) {\n                options.height = this.default_height;\n            }\n\n            this.render();\n            this.setSize(options.height, options.width);\n            this.dialog.append(\"<div class='varvis_header'></div><div class='varvis_body'></div>\");\n        },\n\n        /**\n         * Takes time series data and shows it as a floating point variable changing in time.\n         *\n         * @command addVariable(state, options)\n         * @param {Object} state - time series data (a geppetto simulation variable)\n         * @param {Object} options - options for the plotting widget, if null uses default\n         */\n        setVariable: function setVariable(state, options) {\n            this.variable = {\n                name: state.getInstancePath(),\n                state: state\n            };\n\n            if (this.root == null) {\n                this.root = $(\"#\" + this.id);\n            }\n\n            this.setHeader(this.variable.name);\n            this.updateVariable(0, false);\n\n            // track change in state of the widget\n            this.dirtyView = true;\n\n            return \"Variable visualisation added to widget\";\n        },\n\n        /**\n         * Clear variable\n         *\n         * @command removeVariable(state)\n         *\n         * @param {Object} state - geppetto similation variable to remove\n         */\n        clearVariable: function clearVariable() {\n            if (this.variable == null) {\n                return;\n            }\n\n            this.variable = null;\n            this.setHeader(\"\");\n            this.setBody(\"\");\n        },\n\n        /**\n         * Updates variable values\n         */\n        updateVariable: function updateVariable(step) {\n            if (typeof step != 'undefined' && (this.variable.state.getTimeSeries() != null || undefined)) {\n                if (this.variable.state.getTimeSeries().length > step) {\n                    this.setBody(this.variable.state.getTimeSeries()[step].toFixed(4) + this.variable.state.getUnit());\n                }\n            }\n        },\n\n        /**\n         * Change name of the variable (if there's one)\n         *\n         * @param newName - the new name\n         */\n        renameVariable: function renameVariable(newName) {\n            if (this.variable != null) {\n                this.variable.name = newName;\n                this.setHeader(newName);\n            }\n        },\n\n        /**\n         * @private\n         */\n        setHeader: function setHeader(content) {\n            this.getSelector(\"varvis_header\").html(content);\n        },\n\n        /**\n         * @private\n         */\n        setBody: function setBody(content) {\n            this.getSelector(\"varvis_body\").html(content);\n        },\n\n        /**\n         * @private\n         */\n        getSelector: function getSelector(name) {\n            return $(this.root.selector + \" .\" + name);\n        },\n\n        getView: function getView() {\n            var baseView = Widget.View.prototype.getView.call(this);\n\n            // add data\n            baseView.dataType = 'object';\n            baseView.data = this.variable.name;\n\n            return baseView;\n        },\n\n        setView: function setView(view) {\n            // set base properties\n            Widget.View.prototype.setView.call(this, view);\n\n            if (view.dataType == 'object' && view.data != undefined && view.data != '') {\n                var variable = eval(view.data);\n                this.setVariable(variable);\n            }\n\n            // after setting view through setView, reset dirty flag\n            this.dirtyView = false;\n        }\n    });\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/components/widgets/variablevisualiser/VariableVisualiser.js\n// module id = 2365\n// module chunks = 34\n\n//# sourceURL=webpack:///./js/components/widgets/variablevisualiser/VariableVisualiser.js?");

/***/ }),

/***/ 2366:
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(2367);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(25)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/less-loader/dist/cjs.js?{\\\"modifyVars\\\":{\\\"url\\\":\\\"'../../../extensions/geppetto-default/colors'\\\"}}!./VariableVisualiser.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/less-loader/dist/cjs.js?{\\\"modifyVars\\\":{\\\"url\\\":\\\"'../../../extensions/geppetto-default/colors'\\\"}}!./VariableVisualiser.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/components/widgets/variablevisualiser/VariableVisualiser.less\n// module id = 2366\n// module chunks = 34\n\n//# sourceURL=webpack:///./js/components/widgets/variablevisualiser/VariableVisualiser.less?");

/***/ }),

/***/ 2367:
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(24)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \".dark-orange {\\n  color: #fc401a;\\n}\\n.orange {\\n  color: #fc6320;\\n}\\n.orange-color {\\n  color: #fc6320;\\n}\\n.orange-color-bg {\\n  background-color: #fc6320;\\n}\\n.varvis_header {\\n  width: 100%;\\n  font-size: 14px;\\n  color: white;\\n  float: left;\\n  text-align: center;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n.varvis_body {\\n  width: 100%;\\n  height: 100%;\\n  font-size: 34px;\\n  font-weight: bold;\\n  color: #fc6320;\\n  float: left;\\n  text-align: center;\\n  vertical-align: middle;\\n  resize: both;\\n}\\n\", \"\"]);\n\n// exports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js?{\"modifyVars\":{\"url\":\"'../../../extensions/geppetto-default/colors'\"}}!./js/components/widgets/variablevisualiser/VariableVisualiser.less\n// module id = 2367\n// module chunks = 34\n\n//# sourceURL=webpack:///./js/components/widgets/variablevisualiser/VariableVisualiser.less?./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js?%7B%22modifyVars%22:%7B%22url%22:%22'../../../extensions/geppetto-default/colors'%22%7D%7D");

/***/ })

});