'''
Neuron simulator export for:

Components:
    net1 (Type: network)
    sim1 (Type: Simulation:  length=0.52 (SI time) step=0.025 (SI time))
    RS (Type: izhikevich2007Cell:  v0=-0.06 (SI voltage) k=7.0E-7 (SI conductance_per_voltage) vr=-0.06 (SI voltage) vt=-0.04 (SI voltage) vpeak=0.035 (SI voltage) a=30.0 (SI per_time) b=-2.0E-9 (SI conductance) c=-0.05 (SI voltage) d=1.0E-10 (SI current) C=1.0E-10 (SI capacitance))
    RS_Iext (Type: pulseGenerator:  delay=0.0 (SI time) duration=0.52 (SI time) amplitude=1.0E-10 (SI current))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

'''

import neuron

import time

import hashlib
h = neuron.h
h.load_file("stdlib.hoc")

h.load_file("stdgui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt, seed=123456789):

        print("\n    Starting simulation in NEURON of %sms generated from NeuroML2 model...\n"%tstop)

        self.seed = seed
        self.randoms = []
        self.next_global_id = 0  # Used in Random123 classes for elements using random(), etc. 

        self.next_spiking_input_id = 0  # Used in Random123 classes for elements using random(), etc. 

        '''
        Adding simulation Component(id=sim1 type=Simulation) of network/component: net1 (Type: network)
        
        '''
        # ######################   Population: RS_pop
        print("Population RS_pop contains 1 instance(s) of component: RS of type: izhikevich2007Cell")

        h(" {n_RS_pop = 1} ")
        '''
        Population RS_pop contains instances of Component(id=RS type=izhikevich2007Cell)
        whose dynamics will be implemented as a mechanism (RS) in a mod file
        '''
        h(" create RS_pop[1]")
        h(" objectvar m_RS_RS_pop[1] ")

        for i in range(int(h.n_RS_pop)):
            h.RS_pop[i].L = 10.0
            h.RS_pop[i](0.5).diam = 10.0
            h.RS_pop[i](0.5).cm = 31.830988618379067
            h.RS_pop[i].push()
            h(" RS_pop[%i]  { m_RS_RS_pop[%i] = new RS(0.5) } "%(i,i))

            h.m_RS_RS_pop[i].v0 = -60.0
            h.m_RS_RS_pop[i].k = 7.0E-4
            h.m_RS_RS_pop[i].vr = -60.0
            h.m_RS_RS_pop[i].vt = -40.0
            h.m_RS_RS_pop[i].vpeak = 35.0
            h.m_RS_RS_pop[i].a = 0.030000001
            h.m_RS_RS_pop[i].b = -0.002
            h.m_RS_RS_pop[i].c = -50.0
            h.m_RS_RS_pop[i].d = 0.1
            h.m_RS_RS_pop[i].C = 1.0E-4
            h.pop_section()

            self.next_global_id+=1


        # Adding single input: Component(id=null type=explicitInput)
        h("objref explicitInput_RS_IextRS_pop0")
        h("RS_pop[0] { explicitInput_RS_IextRS_pop0 = new RS_Iext(0.5) } ")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt



        # ######################   File to save: results/results0.dat (outputFile0)
        # Column: RS_pop[0]/v
        h(' objectvar v_RS_pop_0__v_outputFile0 ')
        h(' { v_RS_pop_0__v_outputFile0 = new Vector() } ')
        h(' { v_RS_pop_0__v_outputFile0.record(&RS_pop[0].v(0.5)) } ')
        h.v_RS_pop_0__v_outputFile0.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: RS_pop[0]/u
        h(' objectvar v_RS_pop_0__u_outputFile0 ')
        h(' { v_RS_pop_0__u_outputFile0 = new Vector() } ')
        h(' { v_RS_pop_0__u_outputFile0.record(&m_RS_RS_pop[0].u) } ')
        h.v_RS_pop_0__u_outputFile0.resize((h.tstop * h.steps_per_ms) + 1)

        # ######################   File to save: time.dat (time)
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms; seed=%s)" % (h.tstop, h.dt, self.seed))

        h.run()

        self.sim_end = time.time()
        sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(sim_time, sim_time/60.0))

        self.save_results()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    ###############################################################################
    # Hash function to use in generation of random value
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _id32 (self,obj): 
        return int(hashlib.md5(obj).hexdigest()[0:8],16)  # convert 8 first chars of md5 hash in base 16 to int


    ###############################################################################
    # Initialize the stim randomizer
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _init_stim_randomizer(self,rand, stimType, gid, seed): 
        #print("INIT STIM  %s; %s; %s; %s"%(rand, stimType, gid, seed))
        rand.Random123(self._id32(stimType), gid, seed)


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()


        # ######################   File to save: time.dat (time)
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...
        f_time_f2.close()
        print("Saved data to: time.dat")

        # ######################   File to save: results/results0.dat (outputFile0)
        py_v_RS_pop_0__v_outputFile0 = [ float(x  / 1000.0) for x in h.v_RS_pop_0__v_outputFile0.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_RS_pop_0__u_outputFile0 = [ float(x  / 1.0E9) for x in h.v_RS_pop_0__u_outputFile0.to_python() ]  # Convert to Python list for speed, variable has dim: current

        f_outputFile0_f2 = open('results/results0.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_outputFile0_f2.write('%e\t%e\t%e\t\n' % (py_v_time[i], py_v_RS_pop_0__v_outputFile0[i], py_v_RS_pop_0__u_outputFile0[i], ))
        f_outputFile0_f2.close()
        print("Saved data to: results/results0.dat")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

        quit()


if __name__ == '__main__':

    ns = NeuronSimulation(tstop=520.0, dt=25.0, seed=123456789)

    ns.run()

